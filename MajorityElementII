/*
Logic: 
Approach
Our aims to find the majority elements (elements that appear more than ⌊n/3⌋ times) in the given vector nums.

We will use a two-pass algorithm: First, it we will find potential candidates for majority elements . Then, it verifies these candidates in the second pass.

We already know that atmost 2 candidate appears more than N/3.
Why??Checkout---->Boyer–Moore majority vote algorithm

Here is The work flow

First We initialize two candidate variables, candidate1 and candidate2, to 0, and two count variables, count1 and count2, to 0. These variables will keep track of the current potential majority elements and their counts.

We iterate through the nums array in the first pass. For each element num, we do the following:

If num is the same as candidate1, we increment count1 because we found another occurrence of candidate1.
Else if num is the same as candidate2, we increment count2 because we found another occurrence of candidate2.
If count1 is 0, we assign num to candidate1 and set count1 to 1, indicating that num is the current potential majority candidate.
If count2 is 0, we assign num to candidate2 and set count2 to 1, indicating that num is the current potential majority candidate.
If num is neither candidate1 nor candidate2, we decrement both count1 and count2 because we have found a pair of distinct elements, and we can eliminate them as potential majority elements.
After the first pass, candidate1 and candidate2 represent the two potential majority candidates.

In the second pass through the nums array, we count the actual occurrences of candidate1 and candidate2 to verify if they indeed appear more than ⌊n/3⌋ times.

Finally, we add candidate1 and candidate2 to the answer vector if their counts are greater than ⌊n/3⌋.

Complexity
Time complexity:O(N)

Space complexity:O(1)
*/

// Code:

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int candidate1 = 0, candidate2 = 0, count1 = 0, count2 = 0;
        // First pass to find potential candidates
        for (auto num : nums) {
            if (candidate1 == num) count1++;
            else if (candidate2 == num) count2++;
            else if (count1 == 0) candidate1 = num, count1 = 1;
            else if (count2 == 0) candidate2 = num, count2 = 1;
            else count1--, count2--;
        }
         // Second pass to verify candidates
        count1 = count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
        }
        
        vector<int> ans;
        if (count1 > nums.size() / 3) ans.push_back(candidate1);
        if (count2 > nums.size() / 3) ans.push_back(candidate2);
        
        return ans;
    }
};
