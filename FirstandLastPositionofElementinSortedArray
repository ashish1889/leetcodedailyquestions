//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/?envType=daily-question&envId=2023-10-09

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return {first, last};
    }

private:
    int findFirst(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        int first = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                first = mid;
                right = mid - 1;
            }
            else if (nums[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return first;
    }

    int findLast(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        int last = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                last = mid;
                left = mid + 1;
            }
            else if (nums[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return last;
    }
};

//Second way of code using Lower Bound and Upper Bound

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
    int len = nums.size();
    if(len == 1 && nums[0]==target)
    return {0,0};
     //first element which is not less than target= LB
    int indexfirst = lower_bound(nums.begin(),nums.end(),target)-nums.begin();
   
    if(indexfirst>=len||(nums[indexfirst]!=target))
    return{-1,-1};

    //first element which is greater than target = UB
    int indexlast = upper_bound(nums.begin(),nums.end(),target)-nums.begin();
    
    
    
     if(indexlast>=len){
       //  indexlast = len-1;
       return {indexfirst,indexlast-1};
     }
     
     return {indexfirst,indexlast-1};

        
    }
};
